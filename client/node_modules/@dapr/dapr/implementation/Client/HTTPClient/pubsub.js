"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../../logger/Logger");
const Client_util_1 = require("../../../utils/Client.util");
// https://docs.dapr.io/reference/api/pubsub_api/
class HTTPClientPubSub {
    constructor(client) {
        this.client = client;
        this.logger = new Logger_1.Logger("HTTPClient", "PubSub", client.options.logger);
    }
    publish(pubSubName, topic, data, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = (0, Client_util_1.createHTTPQueryParam)({ data: options.metadata, type: "metadata" });
            // Set content type if provided.
            // If not, HTTPClient will infer it from the data.
            const headers = {};
            if (options.contentType) {
                headers["Content-Type"] = options.contentType;
            }
            try {
                yield this.client.execute(`/publish/${pubSubName}/${topic}?${queryParams}`, {
                    method: "POST",
                    body: data,
                    headers,
                });
            }
            catch (e) {
                this.logger.error(`publish failed: ${e}`);
                return { error: e };
            }
            return {};
        });
    }
    publishBulk(pubSubName, topic, messages, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = (0, Client_util_1.createHTTPQueryParam)({ data: metadata, type: "metadata" });
            const params = {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
            };
            const entries = (0, Client_util_1.getBulkPublishEntries)(messages);
            params.body = entries;
            try {
                yield this.client.executeWithApiVersion("v1.0-alpha1", `/publish/bulk/${pubSubName}/${topic}?${queryParams}`, params);
            }
            catch (error) {
                this.logger.error(`Failure publishing bulk messages: ${error}`);
                return this.handleBulkPublishError(entries, error);
            }
            // If no error is thrown, all messages were published successfully
            return { failedMessages: [] };
        });
    }
    handleBulkPublishError(entries, error) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // If the error is returned by the bulk publish API,
                // parse the error message and return the response
                const err = JSON.parse(error.message);
                if (err.error_msg) {
                    const bulkPublishResponse = JSON.parse(err.error_msg);
                    return (0, Client_util_1.getBulkPublishResponse)({ entries: entries, response: bulkPublishResponse });
                }
            }
            catch (_innerError) {
                // This can indicate a general error with the request (e.g., network error, invalid pubsub name, etc.).
            }
            return (0, Client_util_1.getBulkPublishResponse)({ entries: entries, error: error });
        });
    }
}
exports.default = HTTPClientPubSub;
