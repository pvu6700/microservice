"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Client_util_1 = require("../../../utils/Client.util");
const Settings_util_1 = require("../../../utils/Settings.util");
const Logger_1 = require("../../../logger/Logger");
// https://docs.dapr.io/reference/api/state_api/
class HTTPClientState {
    constructor(client) {
        this.client = client;
        this.logger = new Logger_1.Logger("HTTPClient", "State", client.options.logger);
    }
    save(storeName, stateObjects, options = {}) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = (0, Client_util_1.createHTTPQueryParam)({ data: options === null || options === void 0 ? void 0 : options.metadata, type: "metadata" });
            for (const so of stateObjects) {
                const behavior = {
                    consistency: (0, Client_util_1.getStateConsistencyValue)((_a = so === null || so === void 0 ? void 0 : so.options) === null || _a === void 0 ? void 0 : _a.consistency),
                    concurrency: (0, Client_util_1.getStateConcurrencyValue)((_b = so === null || so === void 0 ? void 0 : so.options) === null || _b === void 0 ? void 0 : _b.concurrency),
                };
                so.options = Object.assign({}, so.options, behavior);
            }
            try {
                yield this.client.execute(`/state/${storeName}?${queryParams}`, {
                    method: "POST",
                    body: stateObjects,
                });
            }
            catch (e) {
                this.logger.error(`Error saving state to store ${storeName}, error: ${e}`);
                return { error: e };
            }
            return {};
        });
    }
    get(storeName, key, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const behavior = {
                consistency: (0, Client_util_1.getStateConsistencyValue)(options === null || options === void 0 ? void 0 : options.consistency),
            };
            const queryParams = (0, Client_util_1.createHTTPQueryParam)({ data: options === null || options === void 0 ? void 0 : options.metadata, type: "metadata" }, { data: behavior });
            const result = yield this.client.execute(`/state/${storeName}/${key}?${queryParams}`);
            return result;
        });
    }
    getBulk(storeName, keys, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = (0, Client_util_1.createHTTPQueryParam)({ data: options === null || options === void 0 ? void 0 : options.metadata, type: "metadata" });
            const result = yield this.client.execute(`/state/${storeName}/bulk?${queryParams}`, {
                method: "POST",
                body: {
                    keys,
                    parallelism: (_a = options === null || options === void 0 ? void 0 : options.parallelism) !== null && _a !== void 0 ? _a : Settings_util_1.Settings.getDefaultStateGetBulkParallelism,
                },
            });
            return result;
        });
    }
    delete(storeName, key, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const behavior = {
                concurrency: (0, Client_util_1.getStateConcurrencyValue)(options === null || options === void 0 ? void 0 : options.concurrency),
                consistency: (0, Client_util_1.getStateConsistencyValue)(options === null || options === void 0 ? void 0 : options.consistency),
            };
            const queryParams = (0, Client_util_1.createHTTPQueryParam)({ data: options === null || options === void 0 ? void 0 : options.metadata, type: "metadata" }, { data: behavior });
            // Managed headers
            const headers = {};
            if (options === null || options === void 0 ? void 0 : options.etag) {
                headers["If-Match"] = options.etag;
            }
            try {
                yield this.client.execute(`/state/${storeName}/${key}?${queryParams}`, {
                    method: "DELETE",
                    headers,
                });
            }
            catch (e) {
                this.logger.error(`Error deleting state from store ${storeName}, error: ${e}`);
                return { error: e };
            }
            return {};
        });
    }
    transaction(storeName, operations = [], metadata = null) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            for (const op of operations) {
                const behavior = {
                    consistency: (0, Client_util_1.getStateConsistencyValue)((_b = (_a = op === null || op === void 0 ? void 0 : op.request) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.consistency),
                    concurrency: (0, Client_util_1.getStateConcurrencyValue)((_c = op === null || op === void 0 ? void 0 : op.request.options) === null || _c === void 0 ? void 0 : _c.concurrency),
                };
                op.request.options = Object.assign({}, op.request.options, behavior);
            }
            yield this.client.execute(`/state/${storeName}/transaction`, {
                method: "POST",
                body: {
                    operations,
                    metadata,
                },
            });
        });
    }
    query(storeName, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.client.executeWithApiVersion("v1.0-alpha1", `/state/${storeName}/query`, {
                method: "POST",
                body: Object.assign({}, query),
            });
            if (result === "") {
                return { results: [] };
            }
            return result;
        });
    }
}
exports.default = HTTPClientState;
