"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("@grpc/grpc-js"));
const dapr_grpc_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_grpc_pb");
const Settings_util_1 = require("../../../utils/Settings.util");
const Logger_1 = require("../../../logger/Logger");
const sidecar_1 = __importDefault(require("./sidecar"));
const DaprClient_1 = __importDefault(require("../DaprClient"));
const version_1 = require("../../../version");
class GRPCClient {
    constructor(options) {
        this.options = options;
        this.clientCredentials = this.generateCredentials();
        this.grpcClientOptions = this.generateChannelOptions();
        this.logger = new Logger_1.Logger("GRPCClient", "GRPCClient", options.logger);
        this.isInitialized = false;
        this.logger.info(`Opening connection to ${this.options.daprHost}:${this.options.daprPort}`);
        this.client = this.generateClient(this.options.daprHost, this.options.daprPort);
    }
    getClient(requiresInitialization = true) {
        return __awaiter(this, void 0, void 0, function* () {
            // Ensure the sidecar has been started
            if (!this.isInitialized && requiresInitialization) {
                yield this.start();
            }
            return this.client;
        });
    }
    getClientCredentials() {
        return this.clientCredentials;
    }
    getGrpcClientOptions() {
        return this.grpcClientOptions;
    }
    generateCredentials() {
        if (this.options.daprHost.startsWith("https")) {
            return grpc.ChannelCredentials.createSsl();
        }
        return grpc.ChannelCredentials.createInsecure();
    }
    generateChannelOptions() {
        var _a;
        // const options: Record<string, string | number> = {};
        let options = {};
        // See: GRPC_ARG_MAX_SEND_MESSAGE_LENGTH, it is in bytes
        // https://grpc.github.io/grpc/core/group__grpc__arg__keys.html#ga813f94f9ac3174571dd712c96cdbbdc1
        // Default is 4Mb
        options["grpc.max_send_message_length"] = ((_a = this.options.maxBodySizeMb) !== null && _a !== void 0 ? _a : 4) * 1024 * 1024;
        // There was an issue that there was no default set in grpc-node, so we set it here
        // https://github.com/grpc/grpc-node/issues/1158#issuecomment-1137023216
        options["grpc-node.max_session_memory"] = Number.MAX_SAFE_INTEGER;
        // Add user agent
        options["grpc.primary_user_agent"] = "dapr-sdk-js/v" + version_1.SDK_VERSION;
        // Add interceptors if we have an API token
        if (this.options.daprApiToken !== "") {
            options = Object.assign({ interceptors: [this.generateInterceptors()] }, options);
        }
        return options;
    }
    generateClient(host, port) {
        return new dapr_grpc_pb_1.DaprClient(GRPCClient.getEndpoint(host, port), this.getClientCredentials(), this.getGrpcClientOptions());
    }
    // The grpc client doesn't allow http:// or https:// for grpc connections,
    // so we need to remove it, if it exists
    static getEndpoint(host, port) {
        let endpoint = `${host}:${port}`;
        const parts = endpoint.split("://");
        if (parts.length > 1 && parts[0].startsWith("http")) {
            endpoint = parts[1];
        }
        return endpoint;
    }
    generateInterceptors() {
        return (options, nextCall) => {
            return new grpc.InterceptingCall(nextCall(options), {
                start: (metadata, listener, next) => {
                    if (metadata.get("dapr-api-token").length == 0) {
                        metadata.add("dapr-api-token", this.options.daprApiToken);
                    }
                    next(metadata, listener);
                },
            });
        };
    }
    setIsInitialized(isInitialized) {
        this.isInitialized = isInitialized;
    }
    getIsInitialized() {
        return this.isInitialized;
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.client.close();
        });
    }
    _startWaitForClientReady() {
        return __awaiter(this, void 0, void 0, function* () {
            const deadline = Date.now() + Settings_util_1.Settings.getDaprSidecarStartupTimeoutMs();
            return new Promise((resolve, reject) => {
                this.client.waitForReady(deadline, (err) => {
                    if (err) {
                        this.logger.error(`Error waiting for client to be ready: ${err}`);
                        return reject();
                    }
                    return resolve();
                });
            });
        });
    }
    _startAwaitSidecarStarted() {
        return __awaiter(this, void 0, void 0, function* () {
            yield DaprClient_1.default.awaitSidecarStarted(() => __awaiter(this, void 0, void 0, function* () { return yield sidecar_1.default.isStarted(this); }), this.logger);
        });
    }
    /**
     * Ensure the client is started, this takes care of:
     * 1. Making sure the sidecar is started
     * 2. Making sure the connection is established (e.g. in gRPC)
     * 3. Making sure the client is ready to be used
     */
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._startAwaitSidecarStarted();
            yield this._startWaitForClientReady();
            this.isInitialized = true;
        });
    }
}
exports.default = GRPCClient;
